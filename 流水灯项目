//要求呼吸灯的效果是：灯从灭缓慢的变亮，然后从亮缓慢的变暗，如此循环。
//逐渐变亮和变暗的过程：在数字系统中，不能依靠逐渐增加(降低)电压来控制灯的变化过程，因为FPGA中电压只有0和1。但是可以通过控制高低电平的输出时间来控制，即使呼吸灯在单位时间内亮的时间依次增加，这样就可以形成这种逐渐变亮的效果。
//参考要求：系统时钟位25MHz；灯从灭到亮和从亮到灭时间为2s//同时人眼的视觉停留为0.05秒，也就是当灯光闪烁超过20Hz的频率时，人眼就认为他是连续的发光
//项目知识：需要用到计数器、占空比（PWM(Pluse Width Modulation)脉冲宽度调制）、调节占空比就是调节控制流过LED的电流
代码部分
1.RTL
module breath_led(
input wire clk,
input wire rst,
output reg  led_out
);

parameter cnt_1us_max = 6'd49;
parameter cnt_1ms_max = 10'd999;
parameter cnt_1s_max = 10'd999;

reg [5:0] cnt_1us;
reg [9:0] cnt_1ms;
reg [9:0] cnt_1s;
reg led_en;

//1us计数器
always @(posedge clk or negedge rst)
begin 
    if(rst==1'b0)
        cnt_1us <= 6'b0;
    else if(cnt_1us == cnt_1us_max)
        cnt_1us <= 6'b0;
    else  
        cnt_1us <= cnt_1us + 1'b1;
end

//1ms计数器
always @(posedge clk or negedge rst)
begin
    if(rst==1'b0)
        cnt_1ms <= 10'b0;
    else if (cnt_1ms == cnt_1ms_max && cnt_1us == cnt_1us_max)
        cnt_1ms <= 10'b0;
    else if(cnt_1us == cnt_1us_max)
        cnt_1ms <= cnt_1ms +1'b1;
end

//1s计数器
always @(posedge clk or negedge rst)
begin
    if(rst==1'b0)
        cnt_1s <= 10'b0;
    else if(cnt_1s == cnt_1s_max && cnt_1ms == cnt_1ms_max && cnt_1us == cnt_1us_max)
        cnt_1s <= 10'b0;
    else if(cnt_1ms == cnt_1ms_max && cnt_1us == cnt_1us_max)
        cnt_1s <= cnt_1s + 1'b1;    
end

//led_out 
always @(posedge clk or negedge rst)
begin
 if(rst==1'b0)
    led_out <= 1'b0 ;
 else if((led_en==1'b0 && cnt_1s<cnt_1ms)||(led_en==1'b1 && cnt_1s>cnt_1ms))
    led_out <=1'b0;
 else led_out <=1'b1;
end

//使能信号
always @(posedge clk or negedge rst)
begin
 if(rst==1'b0)
    led_en <=1'b0;
 else if(cnt_1s==cnt_1s_max && cnt_1ms==cnt_1ms_max &&cnt_1us==cnt_1us_max)
    led_en <= ~led_en;
end 



endmodule



TB部分
//testbench代码
`timescale 1ns/100ps

module tb_breath_led;
reg clk;
reg rst;
wire led_out;

breath_led instance_breath_led(
.clk(clk),
.rst(rst),
.led_out(led_out)
);

initial
begin
clk = 1'b0;
rst = 1'b0;
#100 rst = 1'b1;
#10000 $stop;
end

always #20 clk <= ~clk;

endmodule


